services:
############# RabbitMQ-Service #################
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_LOAD_DEFINITIONS: /etc/rabbitmq/definitions.json  # เพิ่มบรรทัดนี้เพื่อให้ RabbitMQ โหลด definitions
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "rabbitmq_data:/var/lib/rabbitmq"
      - "./rabbitmq_definitions.json:/etc/rabbitmq/definitions.json"  # เปลี่ยนบรรทัดนี้
    networks:
      - corninline-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure

  ############# Microservice #################
  user-service:
    build: ./CORNINSPEC-INLINE-USER-SERVICE
    env_file:
      - .env
    ports:
      - "${USER_SERVICE_PORT}:9000"
    networks:
      - corninline-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # prediction-service:
  #   build: ./CORNINSPEC-INLINE-PREDICT-SERVICE
  #   depends_on:
  #     - rabbitmq
  #   env_file:
  #     - .env
  #   ports:
  #     - "${PREDICT_SERVICE_PORT}:9001"
  #   networks:
  #     - corninline-net
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '12'
  #         memory: 16G
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "200k"
  #       max-file: "10"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   restart: on-failure
  #   volumes:
  #     - predictionvolume-data:/var/lib/prediction  # Mount the volume

  prediction-result-service:
    build:
      context: ./CORNINSPEC-INLINE-PREDICT-RESULT-SERVICE
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    env_file:
      - .env
    ports:
      - "${PREDICT_RESULT_PORT}:9002"
    networks:
      - corninline-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  interface-service:
    build: ./CORNINSPEC-INLINE-INTERFACE-SERVICE
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "${INTERFACE_SERVICE_PORT}:9003"
    networks:
      - corninline-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  status-results-service:
    build: ./CORNINSPEC-INLINE-INTERFACE-RESULT-SERVICE
    depends_on:
      - rabbitmq
    env_file:
      - .env
    ports:
      - "${STATUS_RESULTS_SERVICE_PORT}:8004"
    networks:
      - corninline-net
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  corninline-net:
    driver: bridge

volumes:
  corninlinevolume-data:
    driver: local
  predictionvolume-data:
    driver: local
  interfacevolume-data:
    driver: local
  statusresultsvolume-data:
    driver: local
  rabbitmq_data:
    driver: local